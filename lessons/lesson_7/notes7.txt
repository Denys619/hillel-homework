ПЛАН НА НА ЗАНЯТТЯ

+ Git - що це таке, для чого потрібен, навіщо їм користуватися
+ Налаштування git та створення репозиторію на GitHub
+ Вітки, розгалуження
- pull, push, merge, remote branches
- .gitignore
- git reflog
- git stash
- pull requests

git - version control system - "система контролю версій" - система (зачасту програма, або навіть звязка програма + вебсайт), яка дозволяє контролювати та редагувати зміни у вашому коді, у тому числі відкатувати некоректні або помилкові зміни, перевіряти зміни від розробників перед тим, як інтегрувати їх у існуючий код, і т.д.

репозиторій - "папка" з кодом, яка лежить "під гітом" (тобто, гіт цією папкою, її історією змін і т.д. керує). Зачасту репозиторій - це папка з кодом вашого проекту. (здебільшого тимчасові та генеровані файли у репозиторій не кладуться).

branch (вітка) - "розгалуження" коду, відхід від основної "вітки" - використовується у тому випадку, коли вам потрібно зробити з кодом щось інше, не таке як у основній вітці, і при цьому ви хочете основну вітку залишити недоторканою.

remote (ремоут) - "віддалений" репозиторій, який синхронізується (віддзеркалює) з нашим локальним.


Первинні налаштування для роботи з гітом:
- Встановити сам гіт (або з вебсайту https://git-scm.com/downloads/win, або через менеджер пакетів типу scoop або chocolatey)
- Зареєструватися на ГітХабі (або GitLab).
- Створити на ГітХабі новий репозиторій.

git clone <URL> - клонує репозиторій локально вам у поточну папку з URL на ГітХабі або ГітЛабі.
URL може бути HTTP або SSH. У HTTP URL-ок зачасту можуть бути проблеми з постійним введенням пароля. Тому зазвичай свої власні репозиторії ми клонуємо по SSH, тоді коли чужі репозиторії (які ми хочемо тільки подивитися і не будемо змінювати) можна клонувати по HTTP.

git status - команда, яка дає поточний статус вашого репозиторія (на якій бранчі ви знаходитесь, у якому стані знаходяться ваші файли, і т.д.)

git log --oneline --decorate --graph --all   - це команда, яка показує детальний стан поточних бранчів та комітів, та на якому етапі знаходяться локальні бранчі у порівнянні з віддаленими (ремоут) бранчами.

HEAD - це вказівник, який вказує на вашу поточну позицію у гілках та комітах. (ВИ ЗАРАЗ ЗНАХОДИТЕСЬ ТУТ)


staging - це стадія роботи з гітом, коли ваші файли вже "додані" до майбутнього списку для коміту, але ще не були закомічені.
(файли додаються до стейджингу за допомогою команди git add <щось>).

git rm --cached <file> - видаляє файл або папку у <file> з зони стейджингу.

git clean -fdx - команда, яка ретельно чистить гіт-репозиторій (у т.ч. з нетреканими гітом файлами), тому будьте обережні при використанні, щоб не вбити потрібні файли!

git remote -v - показує вам список всіх доступних на даний момент ремоутів.

git push - це команда, яка синхронізує зміни у локальному репозиторії з ремоутом шляхом закидування на ремоут ваших поточних змін. 

git push -u <remote> <branch> - коли ви пушите до вашої бранчі у перший раз (допустимо коли бранча існує тільки локально, і її ще немає у ремоуті), вам потрібно викликати команду пуш такого формату. Вона відрізняється тим, що вона встановлює синхронізацію між локальною віткою, та відповідною віткою на ремоуті. Тобто, <remote> & <branch> - це той ремоут та бранч, з яким ви хочете синхронізувати поточну локальну вітку. 


git push --force - це ДУЖЕ небезпечний маневр, який повністю перетирає існуючу історію комітів на ремоуті. Якщо ви видалили декілька комітів, і потім хочете запушити ці зміни до ремоуту (коли ці коміти на ремоуті вже існують), то ви таким чином розсинхронізуєте історію вашу з історією всіх інших членів команди.

АЛЕ якщо ви хочете видалити ті коміти, які існують лише у вас локально, у цьому немає жодних проблем.


git log --oneline --decorate --graph --all -<цифра> - показати останні <цифра> комітів.