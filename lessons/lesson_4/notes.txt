ПЛАН НА ЗАНЯТТЯ:

1. Вступ до семантики переміщень
2. rvalue vs. lvalue
3. T, T&, T&& - ???
4. Власний класс MyString:
- Конструктор з const char *
- Деструктор (delete)
- Конструктор копіювання
- Конструктор переміщення
- Move assignment operator (no self assignment, data + size, null other data + size)
MyString& operator=(MyString&& other)
- print (функція, що виводить строку на екран)
- private: data, size
5. Демо копіювання та переміщення при мільярді ітерацій

     Deep copy       vs.     shallow copy
(глибоке копіювання) vs. (мілке копіювання)

Глибоке копіювання (копіювання) - це "істинне" копіювання, мається на увазі покрокове та поелементне копіювання всіх даних, з яких складається оригінальний обєкт у цільовий обєкт.
Мілке копіювання (переміщення) - має під собою просте переприсвоєння вказівника замість того, щоб копіювати весь обєкт.

lvalue vs. rvalue
lvalue - left value (зліва від оператора присвоювання) - "змінна" - не-тимчасове значення
rvalue - right value (справа від оператора присвоювання) - "тимчасове значення" - тобто значення, яке існує тільки у якомусь короткому контексті (зачасту взагалі існує лише на протязі однієї строки)

lvalue:
- Має імя;
- Має адресу;

rvalue:
- Не має імя
- Не має адреси

T&& - "посилання на rvalue" (посилання на тимчасове значення) (rvalue reference) - це можливість передати у функцію конкретно rvalue, і ніщо інше.

T& - приймає лише посилання на lvalue. Тобто rvalue (як наприклад print(5)) передати не можна.

"to steal resources"

std::move() - функція, яка була додана у С++11. Функція std::move() є звичайним кастом (конвертація типів). Функція std::move() кастує (конвертує) тип T& до типу T&&.